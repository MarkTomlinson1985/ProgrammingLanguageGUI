using ProgrammingLanguageGUI.commands.drawing;
using ProgrammingLanguageGUI.commands.keywords;
using ProgrammingLanguageGUI.drawer;
using ProgrammingLanguageGUI.exception;
using System.Windows.Forms;

namespace ProgrammingLanguageGUITest.tests.commands.drawing
{
    /// <summary>
    /// Tests relating to the Pen class.
    /// </summary>
    [TestClass]
    public class PenTest
    {
        Drawer drawer = new Drawer(new PictureBox());
        VariableManager variableManager = new VariableManager();

        /// <summary>
        /// Tests the creation and validation of a valid Pen command. Any exception will result
        /// in a failure assertion.
        /// </summary>
        [TestMethod]
        [DataRow("blue")]
        [DataRow("BLUE")]
        [DataRow("rED")]
        [DataRow("255,100,100")]
        public void ValidateCommandShouldSucceedWithValidArguments(string colour)
        {
            Pen command = new Pen(colour);

            try
            {
                command.Execute(drawer, variableManager);
            }
            catch (Exception)
            {
                Assert.Fail();
            }
        }

        /// <summary>
        /// Tests that the ValidateCommand method throws specific exceptions and messages when a Pen object is
        /// created and validated with invalid arguments.
        /// </summary>
        [TestMethod]
        [DataRow("NOTACOLOUR", "Colour 'Notacolour' is not a valid colour.")]
        [DataRow("100", "Colour '100' is not a valid colour.")]
        [DataRow("256,0,0", "Provided rgb values must be between 0 and 255.")]
        [DataRow("255,INVALID,0", "Provided rgb values are not valid numbers.")]
        public void ValidateCommandShouldThrowArgumentExceptionWithInvalidArguments(
            string argumentOne,
            string expectedExceptionMessage)
        {
            Pen command = new Pen(argumentOne);

            Exception ex = Assert.ThrowsException<CommandArgumentException>(() => command.Execute(drawer, variableManager));

            Assert.AreEqual(expectedExceptionMessage, ex.Message);
        }

    }
}